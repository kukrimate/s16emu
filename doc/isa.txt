#
# Base Sigma16 ISA, currently supported
#

Mne     	 AL   	 ML     	 Op    	 Effect
add     	 RRR  	 RRR    	 0     	 Rd := Ra + Rb
sub     	 RRR  	 RRR    	 1     	 Rd := r[a] - Rb
mul     	 RRR  	 RRR    	 2     	 Rd := Ra * Rb
div     	 RRR  	 RRR    	 3     	 Rd := Ra / Rb, R15 := Ra rem Rb
cmp     	 RRR  	 RRR    	 4     	 R15 := Ra ? Rb
cmplt   	 RRR  	 RRR    	 5     	 Rd := Ra < Rb
cmpeq   	 RRR  	 RRR    	 6     	 Rd := Ra = Rb
cmpgt   	 RRR  	 RRR    	 7     	 Rd := Ra > Rb
trap    	 RRR  	 RRR    	 d
lea     	 RX   	 RX     	 f,0   	 Rd := Ra+disp
load    	 RX   	 RX     	 f,1   	 Rd := mem[Ra+disp]
store   	 RX   	 RX     	 f,2   	 mem[Ra+disp] := Rd
jump    	 JX   	 RX     	 f,3   	 pc := Ra+disp
jumpc0  	 KX   	 RX     	 f,4   	 if R15.k=0 then pc := Ra+disp
jumpc1  	 KX   	 RX     	 f,5   	 if R15.k=1 then pc := Ra+disp
jumpf   	 RX   	 RX     	 f,6   	 if Rd=0 then pc := Ra+disp
jumpt   	 RX   	 RX     	 f,7   	 if Rd/=0 then pc := Ra+disp
jal     	 RX   	 RX     	 f,8   	 Rd := pc, pc := Ra+disp

#
# Compare and which bits it effects
#
  let cc = ( a > b ? ccG : 0) | (aint > bint ? ccg : 0)
 	| (a === b ? ccE : 0) | (aint < bint ? ccl : 0) | ( a < b ? ccL : 0) ;
